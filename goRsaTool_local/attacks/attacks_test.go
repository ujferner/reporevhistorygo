package attacks

import (
  "crypto/rsa"
  "math/big"
  "testing"

  fmp "github.com/sourcekris/goflint"
  ln "github.com/sourcekris/goRsaTool/libnum"
)

func TestEncodePublicKey(t *testing.T) {
  n, _ := new(big.Int).SetString("8597656297860545107091403497608238810415884857788354623649545462584626186357491015183008751788834205126626170046660764709588721169432974804650110624299531971774114543254422558416305578835040900745856782965785268333750404184841766134544089627917308591465828618442384534122739386366913053748919149466237339278512341", 10)
  e := 65537
  pemKey := `-----BEGIN RSA PUBLIC KEY-----
MIGhMA0GCSqGSIb3DQEBAQUAA4GPADCBiwKBgwC60gz5ftUELfaWzk3z5aZ4z0+z
aT098S3+n9P9jMiquLlVM+QU4/wMN39O5UgnEYsdMFYaPHQb6nx2iZeJtRdD4HYJ
LfnrBdyX6xUFzp6xK1q54Qq/VvkgpY5+AOzwWXfocoNN2FhM9KyHy33FAVm9lix1
y++2xqw6MadOfY8eTBDVAgMBAAE=
-----END RSA PUBLIC KEY-----
`

  testKey := rsa.PublicKey{N: n, E: e}
  encodedKey, err := EncodePublicKey(&testKey)

  if err != nil {
    t.Errorf("Error encoding the key: %s\n", err)
  }

  if pemKey != encodedKey {
    t.Errorf("Didnt encode key correctly:\nWanted:\n%s\nGot:\n%s\n", pemKey, encodedKey)
  }
}

func TestEncodePrivateKey(t *testing.T) {
  p, _ := new(fmp.Fmpz).SetString("158304142767773473275973624083670689370769915077762416888835511454118432478825486829242855992134819928313346652550326171670356302948444602468194484069516892927291240140200374848857608566129161693687407393820501709299228594296583862100570595789385365606706350802643746830710894411204232176703046334374939501731",10)
  q := fmp.NewFmpz(54311)
  e := fmp.NewFmpz(65537)
  n := new(fmp.Fmpz).Mul(p,q)
  d := ln.SolveforD(p, q, e)
  pemKey := `-----BEGIN RSA PRIVATE KEY-----
MIICpwIBAAKBgwC60gz5ftUELfaWzk3z5aZ4z0+zaT098S3+n9P9jMiquLlVM+QU
4/wMN39O5UgnEYsdMFYaPHQb6nx2iZeJtRdD4HYJLfnrBdyX6xUFzp6xK1q54Qq/
VvkgpY5+AOzwWXfocoNN2FhM9KyHy33FAVm9lix1y++2xqw6MadOfY8eTBDVAgMB
AAECgYJFlcHtNhAA2W3vKuk23oB3M4+IAe+hIy0nl5KjuDx6xtWYbcucckvIX+dG
WRVgvQDlnQ+OZI3zYeWb1Wxmt52woJeq0uo2nUCavzOVlPtxfUqF5waZdYOR9Xjj
Dg2/68dh3KdSOxKYq/OoyzjJRml3fNcwRG6nGhI1HC7WzaXo/4BFAoGBAOFuvbXZ
g3okp9rZULhFhxmiTUDGfGHNnv9HK6aFVPTdfRceok/lNUnHjmDZ/rkSiM2z7E7G
lY/bQUf15FIFjJUVbtFDvRmeI5/9O7TIjD6OR06Cg3WCgEwyp5PktArF1EAitSbw
zNHQjjLgSmKfyiP5l3hq+ncWYGJteYOYxKSjAgMA1CcCgYAuOGNjLpa7a1qTD21y
aqb5hYJrXobQErWfx3rWqI2zqtnj7J8A3JDhcK3rg6arUXaFHne76xFtLlojI/JN
MuARDRTsiQPzha3uNqCQP3IpvUg3e6DybfBaLySWuRSFBOywva0Ar+x+tFEDc2Ms
93AdkiYRRXXXBtp6M9HvPlpLGwICDQUCgYEA1910Fo1Ui3ZH4TbxYjXD77xbW6uF
/lCx4bnkDjpMaTnm8StzfDONy9mGgIk/UgRvxBnCng/M4eLIKpOJv+9/xsl3/ILJ
wf0pPqMIkgH0vvUnBelapUvETfXbtfNtcQUi4xPctU6eaKFOqZ7ffJ6gamCqyZqO
bJMtE+mGE0btphU=
-----END RSA PRIVATE KEY-----
`
  testKey := FMPPrivateKey{
    PublicKey: &FMPPublicKey{
      N: n, 
      E: e,
    },
    D: d, 
    Primes: []*fmp.Fmpz{
      p, 
      q,
    },
    N: n, 
  }

  convertedTestKey := FMPtoRSAPrivateKey(&testKey)
  encodedKey := EncodePrivateKey(convertedTestKey)

  if pemKey != encodedKey {
    t.Errorf("Didnt encode key correctly:\nWanted:\n%s\nGot:\n%s\n", pemKey, encodedKey)
  }
}

func TestFactorDB(t *testing.T) {
  n, _ := new(fmp.Fmpz).SetString("20621750267152614372511154127630834828650842471403197420627624634995641445264611301521536394494222306763722460243604532087804596343272883051903137446807706391744484874946564173593120000142622355944703599984473382960498060488910223822540413244808714312244235115271360890728119312050221054304224094425401105613861305013563551491405848481731889924108755979093970620085407418359069151521144533567160634522778749571920873926079138541765308326114841382175052307472122163146240196121035096483713942342665052475556933935388266918227885989332020342701994949078216608386954333308039363006045786860788193669735242074089496043435024347118605259049621001327230673967595302433625181686605594786528098202718607801030192494015103992593214635574174522017403594005403830602202622875443113701334420808107862798497828867783496364857938305727954479262889562215186039812208961157944153847667741946574776559918179497703075672189532278215230459842346727333821666928332552333954971343144638788445876559729810114877258966889615038147223912298289028203488466463162267754958689409484898706404559934123043284971567725086474382475621264461467749881262867183918666999257623698881935700778315383291602059022026520649681886632336532971772561243278837804579164761873982701072229548260362895897175683450182134223930218685437070014488524291887235297736000334494161657111252307087006035832384130465403417980554372043101397013216895293397052167751542665730166593979774386291641308772888852080245934262055011545622216721626363751043643672791515962299025554287440123722439149120145872057816348015657632897793224454092673651710521209221224810118747827968189052429492509290693652292202416403871346427335546648614804149133552945105363241107403",10)
  d, _ := new(fmp.Fmpz).SetString("14238595317742999419724769754938781250763374470504693325614853324964337260473761783498650279800083214113633597028905025886220696539808676487810990320055777986981852771353692958470211836465718666232109840287126433195683319883175557901548380910643440062001066316754571488874042555954415870856469543873595456461736697028682488800793537233117929581089236870927586928444768162841848698833991657971032941281875294823977165052113666215510834712241343835884906653153316853610952166675061327465777800946124641108146027349487613338446260485615586412669839642820611579619907362274358756247706196689009661388851221985884813635825504296909764451097355517611659461901982985438319875683493691292185874791454027302223634094551220182928350121430134182932680525006618513686890299973399823621425339643252481969356228777834892814497731772214904298621666938042545923216036622280857561481218613941747916051982796584394075704969343201573114019706739472353533570433321961502164740514091636637780492428422152802027694448630255895922836897000702331310179336977926093427139350738453364877976422537279772077127699346944728179537841470709234243192668642484338161733467897372256061394288813328955281782536646768400934960342368840602795111181320138753910625976217707986214333176969850908466890333594217718026081513558619037578427556655148048046773445254770046703210886334867336022023628871143385342445444410753899728096994258681023961045321666172428810183101037727271943427218732327700395005707600420809642680284162289111586274530200849792802191262356412444502379217320999333688778283650434020762899496775640122865207935335877762413652189409275709066819501802370174771676153309355768377030948939894121990057375593506757266976551113",10)

  fmpPubKey := &FMPPublicKey{
    N: n,
    E: fmp.NewFmpz(65537),
  }

  targetRSA, _ := NewRSAStuff(PrivateFromPublic(fmpPubKey), nil, nil, "")
  targetRSA.FactorDB()

  if targetRSA.Key.D.Cmp(d) != 0 {
    t.Errorf("got %d wanted %d for d\n", targetRSA.Key.D, d)
  }
}