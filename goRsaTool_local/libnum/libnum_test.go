package libnum

import (
  fmp "github.com/sourcekris/goflint"
  "testing"
)

func TestFindGcd(t *testing.T) {
  a := fmp.NewFmpz(121891891892166)
  b := fmp.NewFmpz(15874264264299962)
  c := fmp.NewFmpz(1231231231234)
  d := new(fmp.Fmpz).Set(FindGcd(a, b))

  if c.Cmp(d) != 0 {
    t.Errorf("got %d; want %d for a = %d and b = %d\n", d, c, a, b)
  }
}

func TestNthRoot(t *testing.T) {
  a, _ := new(fmp.Fmpz).SetString("77713237568615695716302170346576685641461819634599060687131984258824396858192862333826109737083261489916798000697117881307419629077115290397370118215186293569377874182041326329956290773800630721069180572611740891681923323650082495247585531410068236651399008306243425467722604650048175895458396158243733210932878316970697747416705057982991354243485411143732741856582564118835715968059936195441872417041360726613750704659185951042587499065894415371563343612566415956707357412251427435192041578314370039687521775796785264224471922522429108336215661995333480481138394633360808437853643706456878604278193409314716908010915113045557463273544547567838042043268827673777997890389720496304638901024527666194461188851430422787567380422926075310828604017684875680088503323794946742538769935931638997923476102825078474027110316602117432695051935657303134519416398821863625450038357776744192069018252660963482605322774478855629191805668715190713013758235454222732873147245274801299052843805247853665447088224582671095362847599414790388848988353066610192348696724524023447919390115028898315805024826533598527984181872533328995114347986512911257119317984192614546717758660336645159279989500341080285132221380223848698938666746474861675766042867213066",10)
  b, _ := new(fmp.Fmpz).SetString("4267416192075741145323847256775944681056470770576175875523746449733630385018049065430211398788992179150146250489792205316604075437767753704828856377637167368027971570788207480461606495523974020488580030931166541497929714737714134113919072534227370281842419934398897175116429310461963088706125335411534893546834080743445820284362398894543366884209637713711615982130233729676609190613992172648698536622556852225972", 10)
  c    := int32(3)
  d    := new(fmp.Fmpz).Root(a, c)

  if b.Cmp(d) != 0 {
    t.Errorf("got %d; want %d for a = %d and c = %d\n", d, b, a, c)
  }
}

func TestContfractToRational(t *testing.T) {
  expectedE,_ := new(fmp.Fmpz).SetString("8372927498234629874",10)
  expectedN,_ := new(fmp.Fmpz).SetString("9823749823749273297",10)
  frac := []int{0,1,5,1,3,2,1,2,2,1,1,1,154,2,2,8,1,1,1,4,3,4,3,1,1,1,19,1,1,7,2,1,3,1,10,1,14,3,1,2,2,6,2}
  e, n := ContfractToRational(frac)

  if e.Cmp(expectedE) != 0 || n.Cmp(expectedN) != 0 {
    t.Errorf("got %d %d; want %d %d\n", e, n, expectedE, expectedN)
  }
}

func TestIsPerfectSquare(t *testing.T) {
  if IsPerfectSquare(fmp.NewFmpz(64)).Sign() < 0 || IsPerfectSquare(fmp.NewFmpz(65)).Sign() > 0 {
    t.Error("IsPerfectSquare Failed\n")
  }
}

func TestRationalToContfract(t *testing.T) {
  e,_ := new(fmp.Fmpz).SetString("8372927498234629874",10)
  n,_ := new(fmp.Fmpz).SetString("9823749823749273297",10)
  frac := []int{0,1,5,1,3,2,1,2,2,1,1,1,154,2,2,8,1,1,1,4,3,4,3,1,1,1,19,1,1,7,2,1,3,1,10,1,14,3,1,2,2,6,2}

  testfrac := RationalToContfract(e, n)

  for i, _ := range testfrac {
    if testfrac[i] != frac[i] {
      t.Errorf("Index %d of the result was %d wanted %d\n", i, testfrac[i], frac[i])
    }
  }
}

func TestSolveforD(t *testing.T) {
  p := fmp.NewFmpz(54311)
  e := fmp.NewFmpz(65537)
  q, _ := new(fmp.Fmpz).SetString("158304142767773473275973624083670689370769915077762416888835511454118432478825486829242855992134819928313346652550326171670356302948444602468194484069516892927291240140200374848857608566129161693687407393820501709299228594296583862100570595789385365606706350802643746830710894411204232176703046334374939501731", 10)
  d, _ := new(fmp.Fmpz).SetString("3202366961024225437401042327051546624286493666159185825709910141194793831730434297613156506897776947041469725191935860984079125187288357316861055577066775317547410806245642105103224133266085961352228593400306599829530729406090559213905092312407885703344866519615905603338057992843115227254119045112779823038562373",10)
  

  testD := SolveforD(p, q, e)

  if testD.Cmp(d) != 0 {
    t.Errorf("SolveforD resolves a different d. Got %d want %d\n", testD, d)
  }
}
